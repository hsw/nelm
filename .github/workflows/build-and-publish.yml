name: Build and Push Multiarch Docker Image

on:
  push:
    branches: [main]
    tags: ['*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      nelm_version:
        description: 'NELM version to build (e.g., 1.12.2)'
        required: true
        type: string
      quality_labels:
        description: 'Comma-separated quality labels (e.g., ea,stable,rock-solid)'
        required: false
        type: string
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Determine NELM version
        id: nelm-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ inputs.nelm_version }}" >> $GITHUB_OUTPUT
            echo "build_arg=NELM_VERSION=${{ inputs.nelm_version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(grep "ARG NELM_VERSION=" Dockerfile | cut -d'=' -f2)
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "build_arg=" >> $GITHUB_OUTPUT
          fi

      - name: Generate Docker tags
        id: tags
        run: |
          VERSION="${{ steps.nelm-version.outputs.version }}"
          QUALITY_LABELS="${{ inputs.quality_labels }}"

          # Base images
          GHCR_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          DOCKERHUB_IMAGE="hsww/nelm"

          TAGS=""

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual builds: version, major.minor, and quality labels
            MAJOR_MINOR=$(echo "$VERSION" | cut -d'.' -f1,2)

            # Add full version tags
            TAGS="${TAGS}${GHCR_IMAGE}:${VERSION},"
            TAGS="${TAGS}${DOCKERHUB_IMAGE}:${VERSION},"

            # Add major.minor tags
            TAGS="${TAGS}${GHCR_IMAGE}:${MAJOR_MINOR},"
            TAGS="${TAGS}${DOCKERHUB_IMAGE}:${MAJOR_MINOR},"

            # Add quality label tags
            if [ -n "$QUALITY_LABELS" ]; then
              IFS=',' read -ra LABELS <<< "$QUALITY_LABELS"
              for label in "${LABELS[@]}"; do
                label=$(echo "$label" | xargs) # trim whitespace
                TAGS="${TAGS}${GHCR_IMAGE}:${label},"
                TAGS="${TAGS}${DOCKERHUB_IMAGE}:${label},"
              done
            fi

            # Remove trailing comma
            TAGS="${TAGS%,}"
          else
            # For git events: use metadata-action generated tags
            TAGS="${{ steps.meta.outputs.tags }}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        if: github.event_name != 'workflow_dispatch'
        uses: docker/metadata-action@v5
        with:
          images: |
            hsww/nelm
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push multiarch image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ${{ steps.nelm-version.outputs.build_arg }}

      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- Platforms: linux/amd64,linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- Digest: ${{ steps.push.outputs.digest }}" >> $GITHUB_STEP_SUMMARY