name: Update NELM Version

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      max_builds:
        description: 'Maximum number of versions to build in one run'
        required: false
        type: number
        default: 10

permissions:
  contents: write
  actions: write

jobs:
  discover-releases:
    runs-on: ubuntu-latest
    outputs:
      releases: ${{ steps.get-releases.outputs.releases }}
    steps:
      - name: Get all stable NELM releases
        id: get-releases
        uses: actions/github-script@v8
        with:
          script: |
            const maxBuilds = ${{ inputs.max_builds || 10 }};

            try {
              // Get all releases from werf/nelm
              const releases = await github.rest.repos.listReleases({
                owner: 'werf',
                repo: 'nelm',
                per_page: 100
              });

              // Helper function to parse semver
              function parseSemver(version) {
                const parts = version.split('.').map(Number);
                return {
                  major: parts[0] || 0,
                  minor: parts[1] || 0,
                  patch: parts[2] || 0
                };
              }

              // Helper function to compare versions
              function compareVersions(a, b) {
                const vA = parseSemver(a);
                const vB = parseSemver(b);

                if (vA.major !== vB.major) return vB.major - vA.major;
                if (vA.minor !== vB.minor) return vB.minor - vA.minor;
                return vB.patch - vA.patch;
              }

              // Filter out pre-releases (alpha, beta) and extract stable releases
              const stableReleases = releases.data
                .filter(release => !release.prerelease)
                .map(release => {
                  const version = release.tag_name.replace(/^v/, '');

                  // Extract quality labels from release name
                  // Format: "v1.12.2 [ea,stable,rock-solid]"
                  const labelMatch = release.name.match(/\[(.*?)\]/);
                  const qualityLabels = labelMatch ? labelMatch[1] : '';

                  return {
                    version: version,
                    quality_labels: qualityLabels,
                    published_at: release.published_at
                  };
                })
                .sort((a, b) => compareVersions(a.version, b.version))
                .slice(0, maxBuilds);

              // Mark the latest version (first after sorting)
              if (stableReleases.length > 0) {
                stableReleases[0].is_latest = true;
              }

              console.log(`Found ${stableReleases.length} stable releases:`);
              stableReleases.forEach(r => {
                const latestMark = r.is_latest ? ' [LATEST - will get major tag]' : '';
                console.log(`  - ${r.version} [${r.quality_labels || 'no labels'}]${latestMark}`);
              });

              return stableReleases;
            } catch (error) {
              core.setFailed(`Error getting NELM releases: ${error.message}`);
              return [];
            }
          result-encoding: json

  build-releases:
    needs: discover-releases
    if: needs.discover-releases.outputs.releases != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: ${{ fromJson(needs.discover-releases.outputs.releases) }}
      fail-fast: false
      max-parallel: 3
    steps:
      - name: Verify NELM release files are available
        id: verify-files
        run: |
          VERSION="${{ matrix.release.version }}"
          echo "Checking if NELM ${VERSION} files are available..."

          # Check both architectures
          for ARCH in amd64 arm64; do
            echo "Checking ${ARCH}..."
            NELM_URL="https://tuf.nelm.sh/targets/releases/${VERSION}/linux-${ARCH}/bin/nelm"
            SIG_URL="https://tuf.nelm.sh/targets/signatures/${VERSION}/linux-${ARCH}/bin/nelm.sig"

            # Check nelm binary
            if ! curl -fsSL --head "${NELM_URL}" > /dev/null 2>&1; then
              echo "❌ NELM binary not available for ${ARCH}: ${NELM_URL}"
              echo "files-ready=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            # Check signature file
            if ! curl -fsSL --head "${SIG_URL}" > /dev/null 2>&1; then
              echo "❌ NELM signature not available for ${ARCH}: ${SIG_URL}"
              echo "files-ready=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "✅ Files available for ${ARCH}"
          done

          echo "✅ All release files are available"
          echo "files-ready=true" >> $GITHUB_OUTPUT

      - name: Trigger build for NELM version
        if: steps.verify-files.outputs.files-ready == 'true'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ matrix.release.version }}';
            const qualityLabels = '${{ matrix.release.quality_labels }}';
            const isLatest = '${{ matrix.release.is_latest }}' === 'true';

            console.log(`Triggering build for NELM ${version}`);
            console.log(`Quality labels: ${qualityLabels || 'none'}`);
            console.log(`Is latest: ${isLatest}`);

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-and-publish.yml',
              ref: context.ref || 'main',
              inputs: {
                nelm_version: version,
                quality_labels: qualityLabels,
                is_latest: isLatest.toString()
              }
            });

            console.log(`✅ Build triggered for version ${version}`);

      - name: Build summary
        if: always()
        run: |
          echo "## Build Request Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ matrix.release.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Labels: ${{ matrix.release.quality_labels || 'none' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Files Available: ${{ steps.verify-files.outputs.files-ready }}" >> $GITHUB_STEP_SUMMARY
