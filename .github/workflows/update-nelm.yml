name: Update NELM Version

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-update:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create-pr.outputs.pull-request-number }}
      updated: ${{ steps.update.outputs.updated }}
      new-version: ${{ steps.update.outputs.new-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get latest NELM release
        id: latest-release
        uses: actions/github-script@v8
        with:
          script: |
            try {
              const response = await github.rest.repos.getLatestRelease({
                owner: 'werf',
                repo: 'nelm'
              });
              const latestVersion = response.data.tag_name.replace(/^v/, '');
              return latestVersion;
            } catch (error) {
              core.setFailed(`Error getting latest NELM version: ${error.message}`);
              return '';
            }
          result-encoding: string

      - name: Get current NELM version
        id: current-version
        run: |
          set -eo pipefail
          CURRENT_VERSION=$(grep "ARG NELM_VERSION=" Dockerfile | cut -d'=' -f2)
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Update Dockerfile if new version available
        id: update
        if: steps.latest-release.outputs.result != '' && steps.latest-release.outputs.result != steps.current-version.outputs.current-version
        run: |
          LATEST_VERSION=${{ steps.latest-release.outputs.result }}
          sed -i "s/ARG NELM_VERSION=.*/ARG NELM_VERSION=${LATEST_VERSION}/" Dockerfile
          echo "updated=true" >> $GITHUB_OUTPUT
          echo "new-version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.update.outputs.updated == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PAT_GITHUB }}
          commit-message: "chore: update NELM version to ${{ steps.update.outputs.new-version }}"
          title: "Update NELM version to ${{ steps.update.outputs.new-version }}"
          body: |
            This PR updates the NELM version from ${{ steps.current-version.outputs.current-version }} to ${{ steps.update.outputs.new-version }}.
            
            Automated update triggered by a new NELM release.
          assignees: ${{ github.repository_owner }}
          labels: automerge,github-actions
          branch: update-nelm-version
          base: main
          delete-branch: true

  auto-merge:
    needs: check-update
    if: needs.check-update.outputs.updated == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for build-and-publish workflow
        id: wait-for-workflow
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PAT_GITHUB }}
          script: |
            const branch = "update-nelm-version";
            const workflowName = "Build and Push Multiarch Docker Image";
            
            // Function to sleep for specified ms
            const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
            
            // Function to get workflow runs
            async function getWorkflowRuns() {
              const runs = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch,
                status: 'completed',
                per_page: 30
              });
              return runs.data.workflow_runs.filter(run => run.name === workflowName);
            }
            
            console.log(`Waiting for "${workflowName}" workflow to complete on branch "${branch}"...`);
            
            // Poll until workflow completes or timeout
            const timeout = Date.now() + (15 * 60 * 1000); // 15 minutes timeout
            while (Date.now() < timeout) {
              const runs = await getWorkflowRuns();
              
              if (runs.length > 0) {
                const latestRun = runs[0]; // Most recent run first
                
                if (latestRun.conclusion === 'success') {
                  console.log(`✅ Workflow "${workflowName}" completed successfully!`);
                  return true;
                } else if (latestRun.conclusion) {
                  console.log(`❌ Workflow "${workflowName}" completed with status: ${latestRun.conclusion}`);
                  core.setFailed(`Workflow "${workflowName}" did not succeed. Status: ${latestRun.conclusion}`);
                  return false;
                }
              }
              
              console.log("Workflow still running or not found, waiting 30 seconds...");
              await sleep(30000); // Wait 30 seconds before checking again
            }
            
            core.setFailed("Timed out waiting for workflow run to complete");
            return false;

      - name: Auto-merge PR
        if: steps.wait-for-workflow.outputs.result == 'true'
        id: merge
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PAT_GITHUB }}
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ needs.check-update.outputs.pr_number }},
                merge_method: 'merge'
              });
              return 'success';
            } catch (error) {
              core.setFailed(`Failed to merge PR: ${error.message}`);
              return 'failed';
            }
          result-encoding: string

      - name: Checkout main branch
        if: steps.merge.outputs.result == 'success'
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.PAT_GITHUB }}

      - name: Create and push tag
        if: steps.merge.outputs.result == 'success'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git tag ${{ needs.check-update.outputs.new-version }}
          git push origin ${{ needs.check-update.outputs.new-version }}